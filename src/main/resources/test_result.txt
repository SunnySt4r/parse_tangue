Function{name='foo',
 params=[a, b],
 resultType=SOME,
 body=VariableDeclaration{name='b', value=Number{value=100}}
ReturnStatement{
expression=BinaryOp{
left=VariableReference{name='a'},
 type=ADD,
 right=VariableReference{name='b'}}}
}
VariableDeclaration{name='a', value=Number{value=1}}
VariableDeclaration{name='b', value=null}
Function{name='foo2',
 params=[a, b, c],
 resultType=SOME,
 body=VariableDeclaration{name='a', value=VariableReference{name='c'}}
ReturnStatement{
expression=BinaryOp{
left=VariableReference{name='a'},
 type=MUL,
 right=BinaryOp{
left=VariableReference{name='b'},
 type=MOD,
 right=VariableReference{name='c'}}}}
}
IfStatement{
condition=BinaryOp{
left=VariableReference{name='a'},
 type=EQ,
 right=Number{value=0}},
 body=VariableDeclaration{name='b', value=VariableReference{name='a'}}
VariableDeclaration{name='a', value=FunctionCall{
functionName='foo',
 arguments=[VariableReference{name='a'}, VariableReference{name='b'}]}}
, elseStatement=IfStatement{
condition=BinaryOp{
left=VariableReference{name='a'},
 type=LE,
 right=Number{value=0}},
 body=VariableDeclaration{name='b', value=Number{value=100}}
VariableDeclaration{name='a', value=FunctionCall{
functionName='foo',
 arguments=[VariableReference{name='a'}, VariableReference{name='b'}]}}
, elseStatement=IfStatement{
condition=null,
 body=VariableDeclaration{name='c', value=Number{value=-1}}
VariableDeclaration{name='a', value=FunctionCall{
functionName='foo',
 arguments=[VariableReference{name='a'}, VariableReference{name='b'}]}}
}}}
VariableDeclaration{name='a', value=FunctionCall{
functionName='foo2',
 arguments=[VariableReference{name='a'}, VariableReference{name='b'}, Number{value=100}]}}
Function{name='foo3',
 params=[a, b, c],
 resultType=VOID,
 body=VariableDeclaration{name='a', value=VariableReference{name='c'}}
}